{"version":3,"sources":["RecordInput.js","RecordList.js","App.js","index.js"],"names":["RecordInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNewMessage","newMessage","length","setState","message","submitMessage","state","_this2","classes","react_default","a","createElement","index_es","container","alignItems","direction","className","root","item","variant","lightTextColor","paper","elevation","noValidate","autoComplete","input","id","label","onChange","event","target","value","multiline","fullWidth","rowsMax","margin","type","defaultValue","textField","InputLabelProps","shrink","name","submit","color","button","onClick","disabled","submittingMessage","Component","withStyles","theme","spacing","unit","marginTop","marginBottom","objectSpread","mixins","gutters","paddingTop","paddingBottom","maxWidth","backgroundColor","padding","textAlign","RecordList","messageElements","keys","messages","slice","reverse","map","txHash","_this$props$messages$","text","status","isPending","key","messageContainer","noWrap","rel","href","concat","push","align","spinner","xs","header","loadingMessages","fontWeight","width","App","_ref","asyncToGenerator","regenerator_default","mark","_callee","rawResponse","content","checkReceipt","wrap","_context","prev","next","fetch","method","headers","Content-Type","Accept","body","JSON","stringify","sent","json","assign","hash","console","log","url","accountInterval","window","setInterval","checkTransactionStatus","error","stop","_x","apply","arguments","_ref2","_callee2","interval","contractInfo","_context2","getContractInfo","Web3","providers","HttpProvider","endpoint","eth","getTransactionReceipt","receipt","clearInterval","_x2","_x3","_x4","_callee3","resp","_context3","abrupt","componentDidMount","_callee4","web3","contract","blockNum","thousandBlocksAgo","_context4","Contract","abi","address","getBlockNumber","toString","getPastEvents","fromBlock","toBlock","eventLogs","forEach","transactionHash","returnValues","src_RecordInput","src_RecordList","transactionHashes","flex","display","flexDirection","minHeight","footer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.6c2efd19.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, LinearProgress, Grid, Paper, TextField, Typography } from '@material-ui/core';\n\nconst styles = theme => ({\n  lightTextColor: {\n    color: '#eaeaea'\n  },\n  margin: {\n    margin: theme.spacing.unit,\n  },\n  input: {\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 2,\n  },\n  paper: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    maxWidth: 600,\n    marginTop: theme.spacing.unit * 4\n  },\n  root: {\n    backgroundColor: '#282c34',\n    padding:50\n  },\n  submit: {\n    textAlign: 'center',\n    marginBottom: 8\n  },\n\n});\n\n/**\n * The record input component renders the form element that allows a user to \n * write a message and submit that message.\n */\nclass RecordInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { message: '' };\n  }\n\n  /**\n   * We limit the size of the input message to 140 characters.\n   */\n  handleNewMessage = (newMessage) => {\n    if (newMessage.length <= 140) {\n      this.setState({ message: newMessage });\n    }\n  }\n\n  submitMessage = () => {\n    this.props.submitMessage(this.state.message);\n    this.setState({ message: '' });\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container alignItems=\"center\" direction=\"column\" className={this.props.classes.root}>\n        <Grid item>\n          <Typography variant=\"h4\" className={this.props.classes.lightTextColor}>\n            BOND WITH FRIENDS\n          </Typography>    \n        </Grid>\n        <Grid item>\n          <Paper className={this.props.classes.paper} elevation={1}>\n\n              <form className={classes.container} noValidate autoComplete=\"off\">\n                <TextField\n                  className={this.props.classes.input}\n                  id=\"outlined-multiline-flexible\"\n                  label=\"Make Your Bond\"\n                  onChange={(event) => this.handleNewMessage(event.target.value)}\n                  value={this.state.message}\n                  multiline\n                  fullWidth\n                  rowsMax=\"4\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                />\n                <TextField\n                  id=\"date\"\n                  label=\"Set Your Bond\"\n                  type=\"date\"\n                  fullWidth\n                  defaultValue=\"2017-05-24\"\n                  className={classes.textField}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n\n\n                c<Typography variant=\"h5\">Add Your Friends:</Typography>\n\n\n\n                <TextField\n                  id=\"standard-name\"\n                  label=\"Friend 1\"\n                  className={classes.textField}\n                  value={this.state.name}\n                  margin=\"normal\"\n                />\n                <TextField\n                  id=\"standard-name\"\n                  label=\"Friend 2\"\n                  className={classes.textField}\n                  value={this.state.name}\n                  margin=\"normal\"\n                />\n                <TextField\n                  id=\"standard-name\"\n                  label=\"Friend 3\"\n                  className={classes.textField}\n                  value={this.state.name}\n                  margin=\"normal\"\n                />\n                <TextField\n                  id=\"standard-name\"\n                  label=\"Friend 4\"\n                  className={classes.textField}\n                  value={this.state.name}\n                  margin=\"normal\"\n                />\n                <TextField\n                  id=\"standard-name\"\n                  label=\"Friend 5\"\n                  className={classes.textField}\n                  value={this.state.name}\n                  margin=\"normal\"\n                />\n\n                <TextField\n                  id=\"standard-name\"\n                  label=\"Stake\"\n                  fullWidth\n                  className={classes.textField}\n                  value={this.state.name}\n                  margin=\"normal\"\n                />\n              </form>\n            <div className={this.props.classes.submit}>\n              <Button \n                variant=\"outlined\" \n                color=\"primary\"\n                className={this.props.classes.button}\n                onClick={this.submitMessage}\n                disabled={this.state.message === ''}>\n                Stake Your Bond\n               \n              </Button>\n            </div>\n            {(this.props.submittingMessage) ? <LinearProgress /> : null }\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nRecordInput.propTypes = {\n  classes: PropTypes.object.isRequired,\n  submitMessage: PropTypes.func.isRequired,\n  submittingMessage: PropTypes.bool.isRequired,\n};\n\nexport default withStyles(styles)(RecordInput);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, CircularProgress, Grid, Typography } from '@material-ui/core';\n\nconst styles = theme => ({\n  header: {\n    margin: theme.spacing.unit * 3\n  },\n  message: {\n    fontWeight: 100,\n    marginBottom: theme.spacing.unit,\n  },\n  messageContainer: {\n    marginBottom: theme.spacing.unit * 4,\n    width: '80%',\n    maxWidth: 600,\n    textAlign: 'center',\n  },\n});\n\n/**\n * The record list component is responsible for rendering the messages that have been\n * submitted to the smart contract. It will display the message and the transaction\n * hash associated with that message.\n */\nclass RecordList extends Component {\n  render() {\n    const messageElements = Object.keys(this.props.messages).slice(0).reverse().map((txHash) => {\n      const { text, isPending } = this.props.messages[txHash];\n      const status = (isPending) ? 'PENDING' : 'CONFIRMED';\n      return (\n        <Grid item key={txHash} className={this.props.classes.messageContainer}>\n          <Typography variant=\"h5\" className={this.props.classes.message}>\n            \"{text}\"\n          </Typography>\n          <Typography variant=\"caption\" noWrap>\n            Transaction Status: <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://mastery.aion.network/#/transaction/${txHash}`}>\n              {status}\n            </a>\n          </Typography>\n          \n        </Grid> \n      );\n    });\n\n    // If there aren't any messages in the last 1000 blocks, push a \"no message\" element.\n    if (messageElements.length === 0) {\n      messageElements.push(\n        ( \n        <Grid item key=\"noMessages\" className={this.props.classes.messageContainer}>\n          <Typography align=\"center\" variant=\"h5\" className={this.props.classes.message}>\n            No Messages\n          </Typography>\n        </Grid>\n        )\n      )\n    }\n\n    const spinner = (<CircularProgress />)\n\n    return (\n      <Grid container alignItems=\"center\" direction=\"column\">\n        <Grid item xs={6} className={this.props.classes.header}>\n          <Typography variant=\"h5\">Resolutiobs in last 1000 blocks:</Typography>\n        </Grid>\n        { (this.props.loadingMessages) ? spinner : messageElements }\n      </Grid>\n    );\n  }\n}\n\nRecordList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  // messages[txHash] = { e, isPending }\n  messages: PropTypes.object.isRequired,\n  loadingMessages: PropTypes.bool.isRequired,\n};\n\nexport default withStyles(styles)(RecordList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography } from '@material-ui/core';\nimport Web3 from 'aion-web3';\n\nimport './App.css';\nimport RecordInput from './RecordInput';\nimport RecordList from './RecordList';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh'\n  },\n  flex: {\n    flex: 1,\n  },\n  footer: {\n    textAlign: 'center',\n    padding: 8,\n  },\n});\n\n/**\n * This is the main component of the For The Record app.  It lays out\n * the other components of the app, and is responsible for all interaction with the Aion Network.\n * \n * Normally, you might use a state management library such as Redux to handle your app's data.\n * To keep it simple, we just store the app data as state in the base App component.\n * \n * This component has the functionality to submit a message to the app backend - where\n * it will be submitted as a transaction to the Aion network.  It also reads directly from\n * the smart contract event log in order to build up the app state..\n */\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      messages: {},\n      loadingMessages: false,\n      submittingMessage: false,\n    };\n  }\n\n  /**\n   * Sends a message to the backend, where it will be submitted to the Aion network.\n   */\n  submitMessage = async (message) => {\n    this.setState({ submittingMessage: true });\n\n    const rawResponse = await fetch(`/submitRecord`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'text/html'\n      },\n      body: JSON.stringify({ message: message })\n    });\n    \n    const content = await rawResponse.json();\n    if (content.status === 'success') {\n      const messages = Object.assign({}, this.state.messages);\n      messages[content.hash] = {\n        text: message,\n        isPending: true,\n      };\n\n      this.setState({ messages });\n      console.log(`Message submitted: ${content.url}`);\n\n      // Once the transaction has been mined we need to clean up the UI\n      // state so that the latest message no longer says pending. \n      const checkReceipt = this.accountInterval = window.setInterval(() => {\n        this.checkTransactionStatus(checkReceipt, content.hash, message);\n      }, 1000);\n    } else {\n      console.error('Unexpected error when submitting the message.');\n    }\n\n    this.setState({ submittingMessage: false });\n  }\n\n  /**\n   * Helper function that pings getTransactionReceipt for a specific tx hash.\n   * Interval will ping every second until the transaction has been mined.\n   */\n  checkTransactionStatus = async (interval, hash, message) => {\n    const contractInfo = await this.getContractInfo();\n    const web3 = new Web3(new Web3.providers.HttpProvider(contractInfo.endpoint));\n    \n    web3.eth.getTransactionReceipt(hash, (error, receipt) => {\n      if (error) {\n        console.error(error);\n        clearInterval(interval);\n      }\n\n      if (receipt && receipt.status) {\n        const messages = Object.assign({}, this.state.messages);\n        messages[hash] = {\n          text: message,\n          isPending: false,\n        };\n        this.setState({ messages });\n        clearInterval(interval);\n      }\n    });\n  }\n  \n  /**\n   * Helper method that reads info from the server about the ForTheRecord contract.\n   * The response contains the Web3 endpoint, contract ABI, & contract Address\n   */ \n  getContractInfo = async () => {\n    const rawResponse = await fetch(`/contractInfo`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n    });\n    \n    let resp =  await rawResponse.json();\n    console.log(rawResponse);\n    return resp;\n  };\n\n  /**\n   * Within the componentDidMount, we read the event log of our smart contract.\n   * This allows us to populate the app state with previous messages from the contract.\n   * \n   * Currently, reading events is pretty slow, so in this demo app, we only check the last 1000 blocks.\n   */\n  componentDidMount = () => {\n    (async () => {\n      this.setState({ loadingMessages: true });\n\n      const contractInfo = await this.getContractInfo();\n      const web3 = new Web3(new Web3.providers.HttpProvider(contractInfo.endpoint));\n      const contract = new web3.eth.Contract(contractInfo.abi, contractInfo.address);\n\n      const blockNum = await web3.eth.getBlockNumber();\n      const thousandBlocksAgo = (blockNum - 1000).toString();\n\n      contract.getPastEvents('AllResolutions', { fromBlock: thousandBlocksAgo, toBlock: 'latest' }, (error, eventLogs) => {\n        const messages = {};\n        if (!error) {\n          eventLogs.forEach(event => {\n            messages[event.transactionHash] = {\n              text: event.returnValues.message,\n              isPending: false,\n            }\n          });\n\n          this.setState({ messages });\n        } else {\n          console.log(`An unexpected error occurred when reading event logs: ${error}`)\n        }\n\n        this.setState({ loadingMessages: false });\n      });\n    })();\n  }\n\n  render() {\n    return (\n      <div className={this.props.classes.root}>\n        <RecordInput submitMessage={this.submitMessage} submittingMessage={this.state.submittingMessage} />\n        <RecordList messages={this.state.messages} transactionHashes={this.state.transactionHashes} loadingMessages={this.state.loadingMessages} />\n        <div className={this.props.classes.flex}/>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}